// @strict-types


#Область ОбработчикиСобытийФормы

&НаКлиенте
Асинх Процедура ПриОткрытии(Отказ)
	
	Ждать ЗаполнитьНастройкиИзФайлаАсинх();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = "При закрытии формы изменения настроек будет утеряно. Продолжить?";
	Иначе
		СохранитьНастройкиИЗакрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Асинх Процедура ИмяФайлаНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Ждать ВыбратьИмяФайлаНастроек(РежимДиалогаВыбораФайла.Открытие) Тогда
		Ждать ЗаполнитьНастройкиИзФайлаАсинх();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ИмяФайлаНастроекПриИзменении(Элемент)
	
	Ждать ЗаполнитьНастройкиИзФайлаАсинх();

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНастроекОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(ИмяФайлаНастроек);

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбновляемыеОтчеты

&НаКлиенте
Процедура ОбновляемыеОтчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОбновляемыеОтчеты.ТекущиеДанные;
	ПоказатьЗначение(,ТекущиеДанные.ВариантОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура Команда_СохранитьВФайл(Команда)
	
	СохранитьНастройкиВФайл();

КонецПроцедуры

&НаКлиенте
Процедура Команда_ОбновитьВариантыОтчетов(Команда)
	
	ОбновитьВариантыОтчетов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОбновления

// Выбрать имя файла настроек.
// 
// Возвращаемое значение:
//  Булево
&НаКлиенте
Асинх Функция ВыбратьИмяФайлаНастроек(РежимДиалога)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайлаНастроек;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Фильтр = "JSON (*.json)|*.json";
	Результат = Ждать ДиалогВыбораФайла.ВыбратьАсинх();
	Если ЗначениеЗаполнено(Результат) Тогда
		ИмяФайлаНастроек = Результат[0];
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Применить настройки переопределения.
// 
// Параметры:
//  ЗадаватьВопрос - Булево
&НаКлиенте
Асинх Функция ЗаполнитьНастройкиИзФайлаАсинх()
	
	ТекстФайлаНастроек = Ждать ТекстФайлаНастроек();
	
	ЗаполнитьНастройкиИзФайлаНаСервере(ТекстФайлаНастроек);
		
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Файл настроек доступен.
// 
// Возвращаемое значение:
//  Булево
&НаКлиенте
Асинх Функция ФайлНастроекДоступенАсинх()
	
	Если ЗначениеЗаполнено(ИмяФайлаНастроек) Тогда
		Файл = Новый Файл(ИмяФайлаНастроек);
		Возврат Ждать Файл.СуществуетАсинх() И Файл.ЭтоФайл();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Текст файла настроек.
// 
// Параметры:
//  ТекстовыйДокумент - ТекстовыйДокумент
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Асинх Функция ТекстФайлаНастроек(Знач ТекстовыйДокумент = Неопределено)
	
	Если НЕ Ждать ФайлНастроекДоступенАсинх() Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТекстовыйДокумент = Неопределено Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаНастроек);
	Если Ждать Файл.СуществуетАсинх() Тогда		
		ТекстовыйДокумент.Прочитать(ИмяФайлаНастроек);
		Возврат ТекстовыйДокумент.ПолучитьТекст();
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Заполнить настройки из файла.
// 
// Параметры:
//  ТекстФайлаНастроек - Строка
&НаСервере
Процедура ЗаполнитьНастройкиИзФайлаНаСервере(ТекстФайлаНастроек = Неопределено)

	ЗаменяемыеПоля.Очистить();

	Если НЕ ЗначениеЗаполнено(ТекстФайлаНастроек) Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстФайлаНастроек);
	НастройкиИзФайла = ПрочитатьJSON(ЧтениеJSON, Ложь);
	
	НастройкиОбновления = НовыйНастройкиОбновления();
	ЗаполнитьЗначенияСвойств(НастройкиОбновления, НастройкиИзФайла);
	
	Для Каждого ЗаменяемоеПоле Из НастройкиОбновления.ЗаменяемыеПоля Цикл
		ЗаполнитьЗначенияСвойств(ЗаменяемыеПоля.Добавить(), ЗаменяемоеПоле);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция СохранитьНастройкиИЗакрыть()
	
	Если Модифицированность Тогда
		Ждать СохранитьНастройкиВФайл("Сохранить изменения настроек в файл?");
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
	Возврат Истина;
	
КонецФункции

// Сохранить настройки в файл.
// 
// Параметры:
//  ТекстВопроса - Строка 
// 
// Возвращаемое значение:
//  Обещание из Булево
&НаКлиенте
Асинх Функция СохранитьНастройкиВФайл(Знач ТекстВопроса = "")
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		ТекстВопроса = "Настройки будут записаны в файл
		|Продолжить?";
	КонецЕсли;
	
	Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); //КодВозвратаДиалога
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаНастроек) 
		И НЕ Ждать ВыбратьИмяФайлаНастроек(РежимДиалогаВыбораФайла.Сохранение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТД = Новый ТекстовыйДокумент();
	
	Файл = Новый Файл(ИмяФайлаНастроек);
	НовыйТекст = НастройкиОбновленияДляФайла();
	ТД.УстановитьТекст(НовыйТекст);
	ТД.Записать(ИмяФайлаНастроек);
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция НастройкиОбновленияДляФайла()
	
	НастройкиОбновления = НовыйНастройкиОбновления();
	
	ШаблонСтруктуры = Новый ФиксированнаяСтруктура(
		СтруктураДанныеФормыКоллекции("ЗаменяемыеПоля"));
	Для Каждого СтрокаФормы Из ЗаменяемыеПоля Цикл
		СтрокаФайла = Новый Структура(ШаблонСтруктуры);
		ЗаполнитьЗначенияСвойств(СтрокаФайла, СтрокаФормы);
		НастройкиОбновления.ЗаменяемыеПоля.Добавить(СтрокаФайла);
	КонецЦикла;
	
	Возврат НастойкиОбновленияВСтрокуJSON(НастройкиОбновления);
	
КонецФункции

&НаСервере
Функция НастойкиОбновленияВСтрокуJSON(НастройкиОбновления)
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix,Символы.Таб); //Читабельное оформление
	
	ЗаписьJSON = Новый ЗаписьJSON;			
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, НастройкиОбновления);

	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйНастройкиОбновления()
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаменяемыеПоля", Новый Массив);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СтруктураДанныеФормыКоллекции(ИмяРеквизита)
	
	Результат = Новый Структура;
	
	КолонкиТаблицы = ПолучитьРеквизиты(ИмяРеквизита);
	Для Каждого Колонка Из КолонкиТаблицы Цикл
		Результат.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Обновление

&НаКлиенте
Асинх Процедура ОбновитьВариантыОтчетов()
	
	Ответ = Ждать ВопросАсинх("Варианты отчетов будут перезаписаны. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВариантыОтчетовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВариантыОтчетовНаСервере()
	
	ОбновляемыеВарианты = ТаблицаЗначенийИзДинамическогоСписка(Элементы.ОбновляемыеОтчеты);
		
	Для Каждого ТекущиеДанные Из ОбновляемыеВарианты Цикл
		
		ТекущийОбъект = ТекущиеДанные.ВариантОтчета.ПолучитьОбъект();
		НастройкиОтчета = ТекущийОбъект.Настройки.Получить();
		СтрокаНастроекДо = ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкиОтчета);
		ОбработатьНастройкиОтчетаРекурсивно(НастройкиОтчета);
		СтрокаНастроекПосле = ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкиОтчета);
		Если СтрокаНастроекДо = СтрокаНастроекПосле Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийОбъект.Настройки = Новый ХранилищеЗначения(НастройкиОтчета);
		ТекущийОбъект.ЗаписьИсторииДанных.КомментарийВерсии = "Замена полей в отчете после обновления";
		ТекущийОбъект.Записать();
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Изменены настройки варианта %1", ТекущийОбъект));
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ОбработатьНастройкиОтчетаРекурсивно(Данные)
	
	ПроверяемыеСвойства = Новый Массив;
	
	Если ТипЗнч(Данные) = Тип("НастройкиКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ДиаграммаКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		ТребуемыеСвойства = Новый Структура("Выбор,Отбор,Порядок,УсловноеОформление,
		|ПользовательскиеПоля,ПоляГруппировки,Структура,Колонки,Строки,Серии,Точки");
		
		ЗаполнитьЗначенияСвойств(ТребуемыеСвойства, Данные);
		Для Каждого КлючИЗначение Из ТребуемыеСвойства Цикл
			Если КлючИЗначение.Значение <> Неопределено Тогда
				ОбработатьНастройкиОтчетаРекурсивно(КлючИЗначение.Значение);
			КонецЕсли;							
		КонецЦикла
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ВыбранныеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ОтборКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ПорядокКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ПользовательскиеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ПоляГруппировкиКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		
		Для Каждого Элемент Из Данные.Элементы Цикл
			ОбработатьНастройкиОтчетаРекурсивно(Элемент);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		
		Для Каждого Элемент Из Данные Цикл
			ОбработатьНастройкиОтчетаРекурсивно(Элемент);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		ОбработатьНастройкиОтчетаРекурсивно(Данные.Настройки);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
		
		ОбработатьНастройкиОтчетаРекурсивно(Данные.Варианты);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ВариантПользовательскогоПоляВыборКомпоновкиДанных") Тогда
		
		ОбработатьНастройкиОтчетаРекурсивно(Данные.Отбор);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		ОбработатьНастройкиОтчетаРекурсивно(Данные.Отбор);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		
		ОбработатьНастройкиОтчетаРекурсивно(Данные.Отбор);
		ОбработатьНастройкиОтчетаРекурсивно(Данные.Поля);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ВыбранноеПолеКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ЭлементПорядкаКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ОформляемоеПолеКомпоновкиДанных")
		ИЛИ ТипЗнч(Данные) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		
		ПроверяемыеСвойства.Добавить("Поле");
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		ПроверяемыеСвойства.Добавить("ЛевоеЗначение");
		ПроверяемыеСвойства.Добавить("ПравоеЗначение");
		
	КонецЕсли;
	
	Для Каждого ПроверяемоеСвойство Из ПроверяемыеСвойства Цикл
		Для Каждого ПолеЗамены Из ЗаменяемыеПоля Цикл
			Если ПолеЗамены.Использование Тогда
				ПолеКомпоновкиДо = Новый ПолеКомпоновкиДанных(ПолеЗамены.ИмяПоля);
				ТекущееПолеКомпоновки = Данные[ПроверяемоеСвойство];
				Если ТекущееПолеКомпоновки = ПолеКомпоновкиДо Тогда
					НовыйАдресКомпоновки = ПолеЗамены.НовоеИмяПоля;
				ИначеЕсли СтрНачинаетсяС(Строка(ТекущееПолеКомпоновки) + ".", ПолеКомпоновкиДо) Тогда
					НовыйАдресКомпоновки = Строка(ПолеЗамены.НовоеИмяПоля) + Сред(ТекущееПолеКомпоновки, СтрДлина(ПолеКомпоновкиДо) + 1);
				Иначе
					Продолжить;
				КонецЕсли;
				Данные[ПроверяемоеСвойство] = Новый ПолеКомпоновкиДанных(НовыйАдресКомпоновки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

#Область Вспомогательные

&НаСервереБезКонтекста
Функция ТаблицаЗначенийИзДинамическогоСписка(ЭлементФормы)
	
	Схема = ЭлементФормы.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = ЭлементФормы.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;     
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти

#КонецОбласти
